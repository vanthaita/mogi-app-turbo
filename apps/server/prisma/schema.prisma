generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                  @id @default(uuid())
  familyName           String?
  givenName            String?
  name                 String?
  email                String                  @unique
  passwordHash         String?
  stripeCustomerId     String?                 @unique // Add this field
  picture              String?
  providerId           String
  refreshToken         String?      
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  mockInterviews       MockInterview[]         @relation("UserMockInterviews")
  userAnswers          UserAnswer[]            @relation("UserAnswers")
  stripeSubscription   StripeSubscription?     
  subscriptionHistory  SubscriptionHistory[]   @relation("UserSubscriptionHistory")
}

model StripeSubscription {
  id                   String                  @id @default(uuid())
  userId               String                   @unique
  stripeCustomerId     String                  @unique
  stripeSubscriptionId String?    
  status               String
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  user                 User                    @relation(fields: [userId], references: [id])
  history              SubscriptionHistory[]   @relation("SubscriptionStripeHistory")
}

model SubscriptionHistory {
  id                   String                  @id @default(uuid())
  userId               String
  subscriptionId       String?
  action               String                  
  status               String
  timestamp            DateTime                @default(now())
  user                 User                    @relation("UserSubscriptionHistory", fields: [userId], references: [id])
  subscription         StripeSubscription?     @relation("SubscriptionStripeHistory", fields: [subscriptionId], references: [id])
}


model MockInterview {
  id                String       @id @default(uuid())
  jsonMockResp      String
  jobPosition       String
  jobDesc           String
  jobExperience     String
  companyInfo       String?
  interviewLanguage String?
  additionalDetails String?
  is_public         Boolean?  @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            String
  user              User         @relation("UserMockInterviews", fields: [userId], references: [id])
  userAnswers       UserAnswer[] @relation("InterviewAnswers")
}

model UserAnswer {
  id            String       @id @default(uuid())
  mockId        String
  question      String
  correctAnswer String
  userAns       String
  feedback      String
  rating        String
  userId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  mockInterview MockInterview @relation("InterviewAnswers", fields: [mockId], references: [id])
  user          User         @relation("UserAnswers", fields: [userId], references: [id])
}

