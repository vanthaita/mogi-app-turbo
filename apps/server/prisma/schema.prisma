generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id @default(uuid())
  familyName       String?
  givenName        String?
  name             String?
  email            String              @unique
  passwordHash     String?
  picture          String?
  providerId       String
  refreshToken     String?      
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  mockInterviews   MockInterview[]     @relation("UserMockInterviews")
  userAnswers      UserAnswer[]        @relation("UserAnswers")
  stripeSubscription StripeSubscription? 
}


model MockInterview {
  id                String       @id @default(uuid())
  jsonMockResp      String
  jobPosition       String
  jobDesc           String
  jobExperience     String
  companyInfo       String?
  interviewLanguage String?
  additionalDetails String?
  is_public         Boolean?  @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            String
  user              User         @relation("UserMockInterviews", fields: [userId], references: [id])
  userAnswers       UserAnswer[] @relation("InterviewAnswers")
}

model UserAnswer {
  id            String       @id @default(uuid())
  mockId        String
  question      String
  correctAnswer String
  userAns       String
  feedback      String
  rating        String
  userId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  mockInterview MockInterview @relation("InterviewAnswers", fields: [mockId], references: [id])
  user          User         @relation("UserAnswers", fields: [userId], references: [id])
}

model StripeSubscription {
  id                String     @id @default(uuid())
  userId            String     @unique // Assuming one subscription per user
  stripeCustomerId  String     @unique
  stripeSubscriptionId String? // Optional, in case subscriptions aren't active initially
  status            String     // e.g., active, canceled, past_due, etc.
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation(fields: [userId], references: [id])
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
}
